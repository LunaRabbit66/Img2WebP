name: Release

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    if: ${{ !contains(github.event.head_commit.message, 'chore: release version') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Determine bump type and update version
        id: bump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          FILE="Img2WebP/Img2WebP.csproj"

          if grep -q '<Version>' "$FILE"; then
            CURRENT_VERSION=$(grep -oPm1 '(?<=<Version>)[^<]+' "$FILE")
          else
            CURRENT_VERSION="0.0.0"
          fi
          echo "Current version: $CURRENT_VERSION"

          PR_JSON=$(gh api repos/$REPO/commits/$SHA/pulls -H "Accept: application/vnd.github.groot-preview+json" || echo '[]')
          PR_TITLE=$(echo "$PR_JSON" | jq -r '.[0].title // empty')
          PR_BRANCH=$(echo "$PR_JSON" | jq -r '.[0].head.ref // empty')

          REF_NAME="${PR_TITLE:-$PR_BRANCH}"
          if [ -z "$REF_NAME" ]; then
            REF_NAME="${GITHUB_REF_NAME:-}"
          fi
          echo "Reference name: $REF_NAME"

          PREFIX=$(echo "$REF_NAME" | awk -F: '{print tolower($1)}')
          BUMP="minor"
          if [ "$PREFIX" = "release" ]; then
            BUMP="major"
          elif [ "$PREFIX" = "fix" ]; then
            BUMP="patch"
          fi
          echo "Bump type: $BUMP"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          : "${PATCH:=0}"

          case $BUMP in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"

          if [ "$NEW_VERSION" != "$CURRENT_VERSION" ]; then
            if grep -q '<Version>' "$FILE"; then
              sed -i "s#<Version>[^<]*</Version>#<Version>$NEW_VERSION</Version>#" "$FILE"
            else
              awk -v ver="$NEW_VERSION" '1; /<\/PropertyGroup>/ { if (!done) { print "  <Version>"ver"</Version>"; done=1 }}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
            fi
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git add "$FILE"
            git commit -m "chore: release version v$NEW_VERSION" || true
            git tag "v$NEW_VERSION"
            git push origin HEAD:main --tags
          fi

          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP" >> $GITHUB_OUTPUT

      - name: Build & publish
        run: |
          dotnet restore
          dotnet publish Img2WebP/Img2WebP.csproj -c Release -o publish

      - name: Package artifact
        id: package
        run: |
          VERSION=${{ steps.bump.outputs.version }}
          ZIP_NAME="Img2WebP-v${VERSION}.zip"
          (cd publish && zip -r "../$ZIP_NAME" .)
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=${{ steps.bump.outputs.version }}
          TAG="v$VERSION"
          ZIP_NAME="${{ steps.package.outputs.zip_name }}"
          if gh release view "$TAG" > /dev/null 2>&1; then
            gh release upload "$TAG" "$ZIP_NAME" --clobber
          else
            NOTES=$(git log -10 --pretty=format:'- %s')
            gh release create "$TAG" "$ZIP_NAME" -t "$TAG" -n "Version $VERSION\n\nRecent changes:\n$NOTES"
          fi

      - name: Summary
        run: echo "Released version ${{ steps.bump.outputs.version }} (bump: ${{ steps.bump.outputs.bump_type }})"
